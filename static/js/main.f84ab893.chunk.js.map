{"version":3,"sources":["components/Navbar.tsx","App.tsx","pages/HomePage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","pages/PeoplePage.tsx","pages/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["Navbar","className","role","to","isActive","cn","App","HomePage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","gender","All","Male","Female","centuriesList","PeopleFilters","setSearchParams","sex","get","query","centuries","getAll","map","type","placeholder","onChange","event","setSearchWith","target","trim","toLowerCase","century","includes","filter","c","length","sort","order","Loader","PersonLink","person","motherNameLink","fatherNameLink","slug","useParams","name","born","died","motherName","fatherName","columns","Name","Sex","Born","Died","PeopleTable","people","sortValue","sortOrder","visiblePeople","p","peopleCopy","filterBySex","filterByQuery","filterByCentury","input","Math","ceil","a","b","localeCompare","reverse","filterPeople","getSlug","find","column","sortName","newSortName","newOrder","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","isErrorMessage","setIsErrorMessage","useEffect","getPeople","catch","finally","noPeopleOnServer","NotFoundPage","Root","path","element","index","replace","ReactDOM","render","document","getElementById"],"mappings":"yQAGaA,EAAS,WACpB,OACE,qBACE,UAAQ,MACRC,UAAU,iCACVC,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEE,GAAG,IACHF,UAAW,gBAAGG,EAAH,EAAGA,SAAH,OAAkBC,IAAG,cAAe,CAC7C,8BAA+BD,GADtB,EAFb,kBAQA,cAAC,IAAD,CACED,GAAG,UACHF,UAAW,gBAAGG,EAAH,EAAGA,SAAH,OAAkBC,IAAG,cAAe,CAC7C,8BAA+BD,GADtB,EAFb,0BAYT,EC5BYE,G,MAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,qBAAKL,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UAKT,GCjBYM,EAAW,WACtB,OACE,oBAAIN,UAAU,QAAd,sBAEH,E,qBCIM,SAASO,EACdC,EACAC,GAGA,IAAMC,EAAY,IAAIC,gBACpBH,EAAcI,YA+BhB,OAjBAC,OAAOC,QAAQL,GACZM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACX,OAAVA,EACFP,EAAUQ,OAAOF,GACRG,MAAMC,QAAQH,IAEvBP,EAAUQ,OAAOF,GAEjBC,EAAMF,SAAQ,SAAAM,GACZX,EAAUY,OAAON,EAAKK,EACvB,KAEDX,EAAUa,IAAIP,EAAKC,EAEtB,IAGIP,EAAUE,UAClB,C,4CC/BYY,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBAIE3B,GAAI,CACF4B,OAAQvB,EAAcsB,EAAcH,KAElCC,GAPN,aASGF,IAGN,EC7BKM,EAAS,CACb,CAAEC,IAAK,MACP,CAAEC,KAAM,KACR,CAAEC,OAAQ,MAGNC,EAAgB,CAAC,KAAM,KAAM,KAAM,KAAM,MAElCC,EAAgB,WAC3B,MAAwCR,cAAxC,mBAAOC,EAAP,KAAqBQ,EAArB,KACMC,EAAMT,EAAaU,IAAI,OACvBC,EAAQX,EAAaU,IAAI,UAAY,GACrCE,EAAYZ,EAAaa,OAAO,aAYtC,OACE,sBAAK1C,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,mBAAGA,UAAU,aAAa,UAAQ,YAAlC,SACG+B,EAAOY,KAAI,SAAC1C,GACX,kBAAqBY,OAAOC,QAAQb,GAAM,GAA1C,GAAOe,EAAP,KAAYC,EAAZ,KAEA,OACE,cAAC,EAAD,CAEES,OAAQ,CACNY,IAAKrB,GAEPjB,UAAWI,IAAG,CACZ,YAAakC,IAAQrB,IANzB,SASGD,GARIC,EAWV,MAGH,qBAAKjB,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACR4C,KAAK,SACL5C,UAAU,QACV6C,YAAY,SACZ5B,MAAOuB,EACPM,SApCV,SAA2BC,IAN3B,SAAuBrB,GACrB,IAAMI,EAASvB,EAAcsB,EAAcH,GAE3CW,EAAgBP,EACjB,CAGCkB,CAAc,CAAER,MAAOO,EAAME,OAAOhC,MAAMiC,OAAOC,eAAiB,MACnE,IAqCO,sBAAMnD,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,SACGmC,EAAcQ,KAAI,SAAAS,GACjB,OACE,cAAC,EAAD,CAEE,UAAQ,UACRpD,UAAWI,IAAG,cAAe,CAC3B,UAAWqC,EAAUY,SAASD,KAEhC1B,OAAQ,CACNe,UAAWA,EAAUY,SAASD,GAC1BX,EAAUa,QAAO,SAAAC,GAAC,OAAIA,IAAMH,CAAV,IADX,sBAEHX,GAFG,CAEQW,KATvB,SAYGA,GAXIA,EAcV,MAGH,qBAAKpD,UAAU,mBAAf,SACE,cAAC,EAAD,CACE,UAAQ,aACRA,UAAWI,IAAG,oBAAqB,CACjC,cAAeqC,EAAUe,SAE3B9B,OAAQ,CACNe,UAAW,MANf,wBAeN,qBAAKzC,UAAU,cAAf,SACE,cAAC,EAAD,CACEA,UAAWI,IAAG,8BAA+B,CAC3C,cAAeqC,EAAUe,SAE3B9B,OAAQ,CACNe,UAAW,KACXD,MAAO,KACPiB,KAAM,KACNC,MAAO,KACPpB,IAAK,MATT,mCAiBP,EC9HYqB,G,MAAS,kBACpB,qBAAK3D,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCQT4D,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,OACAC,EAEI,EAFJA,eACAC,EACI,EADJA,eAEQC,EAASC,cAATD,KAER,OACE,qBACE,UAAQ,SACRhE,UAAWI,IAAG,CACZ,yBAA0B4D,IAASH,EAAOG,OAH9C,UAME,6BACE,cAAC,IAAD,CACE9D,GAAE,kBAAa2D,EAAOG,MACtBhE,UAAWI,IAAG,CACZ,kBAAkC,MAAfyD,EAAOvB,MAH9B,SAMGuB,EAAOK,SAIZ,6BAAKL,EAAOvB,MACZ,6BAAKuB,EAAOM,OACZ,6BAAKN,EAAOO,OACZ,6BACIN,EACA,cAAC,IAAD,CACE5D,GAAE,kBAAa4D,GACf9D,UAAU,kBAFZ,SAIG6D,EAAOQ,aAGV,mCACIR,EAAOQ,YAAc,QAI7B,6BACIN,EACA,cAAC,IAAD,CACE7D,GAAE,kBAAa6D,GADjB,SAGGF,EAAOS,aAGV,mCACIT,EAAOS,YAAc,UAMlC,ECzDKC,EAAU,CACd,CAAEC,KAAM,QACR,CAAEC,IAAK,OACP,CAAEC,KAAM,QACR,CAAEC,KAAM,SAGGC,EAA+B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC7C,EAAuBjD,cAAhBC,EAAP,oBACMiD,EAAYjD,EAAaU,IAAI,QAC7BwC,EAAYlD,EAAaU,IAAI,SAiD7ByC,EA/Ce,SAACC,GACpB,IAAIC,EAAU,YAAOD,GACfE,EAActD,EAAaU,IAAI,OAC/B6C,EAAgBvD,EAAaU,IAAI,SACjC8C,EAAkBxD,EAAaa,OAAO,aAwC5C,OAtCIyC,IACFD,EAAaA,EAAW5B,QAAQ,SAAAO,GAAM,OAAKA,EAAOvB,MAAQ6C,CAApB,KAGpCC,IACFF,EAAaA,EAAW5B,QACtB,SAAAgC,GAAK,eAAIA,EAAMpB,KAAKf,cAAcE,SAAS+B,KAAlC,UACNE,EAAMjB,kBADA,aACN,EAAkBlB,cAAcE,SAAS+B,MADnC,UAENE,EAAMhB,kBAFA,aAEN,EAAkBnB,cAAcE,SAAS+B,GAFvC,KAMLC,GAAmBA,EAAgB7B,OAAS,IAC9C0B,EAAaA,EAAW5B,QAAO,SAAAO,GAC7B,cACEwB,QADF,IACEA,OADF,EACEA,EAAiBhC,SAASkC,KAAKC,KAAK3B,EAAOM,KAAO,KAAKvD,WAE1D,KAGCkE,GACFI,EAAWzB,MAAK,SAACgC,EAAGC,GAClB,OAAQZ,GACN,IAAK,OACL,IAAK,MACH,OAAOW,EAAEX,GAAWa,cAAcD,EAAEZ,IACtC,IAAK,OACL,IAAK,OACH,OAAQW,EAAEX,GAAaY,EAAEZ,GAC3B,QAAS,OAAO,EAEnB,IAGe,SAAdC,GACFG,EAAWU,UAGNV,CACR,CAEqBW,CAAahB,GAE7BiB,EAAU,SAAC5B,GAAyB,IAAD,EACvC,iBAAOW,EAAOkB,MAAK,SAAAlC,GAAM,OAAIA,EAAOK,OAASA,CAApB,WAAzB,aAAO,EAA6CF,IACrD,EAED,OACE,wBACE,UAAQ,cACRhE,UAAU,uDAFZ,UAIE,gCACE,+BACGuE,EAAQ5B,KAAI,SAACqD,GACZ,kBAAyBnF,OAAOC,QAAQkF,GAAQ,GAAhD,GAAO9B,EAAP,KAAa+B,EAAb,KACMC,EAAcpB,IAAcmB,GACf,SAAdlB,EAAuB,KAAOkB,EAE/BE,EAAW,KAUf,OARIrB,IAAcmB,IAEdE,EADgB,SAAdpB,EACS,KAEA,QAKb,6BACE,uBAAM/E,UAAU,8BAAhB,UACGkE,EACD,cAAC,EAAD,CAAYxC,OAAQ,CAClB+B,KAAMyC,EACNxC,MAAOyC,GAFT,SAKE,sBAAMnG,UAAU,OAAhB,SACE,mBAAGA,UAAWI,IAAG,MAAO,CACtB,UAAW0E,IAAcmB,EACzB,aAAcnB,IAAcmB,IAAalB,EACzC,eAAgBD,IAAcmB,GAAYlB,cAZ3CkB,EAoBZ,IAED,wCACA,6CAIJ,gCACIjB,EAAcrC,KAAI,SAAAkB,GAClB,OACE,cAAC,EAAD,CACEA,OAAQA,EACRC,eAAgBgC,EAAQjC,EAAOQ,YAC/BN,eAAgB+B,EAAQjC,EAAOS,aAC1BT,EAAOG,KAGjB,QAIR,E,cCxIKoC,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,C,sDAEM,iHAEED,EAAK,KACTK,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,sBCFA,IAAMC,EAAa,WACxB,MAA4BC,mBAAmB,IAA/C,mBAAOlC,EAAP,KAAemC,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA4CH,oBAAS,GAArD,mBAAOI,EAAP,KAAuBC,EAAvB,KAEAC,qBAAU,WACRH,GAAa,GDJV,WAAP,+BCKII,GACGZ,KAAKM,GACLO,OAAM,kBAAMH,GAAkB,EAAxB,IACNI,SAAQ,kBAAMN,GAAa,EAAnB,GACZ,GAAE,IAEH,IAAMO,GAAoB5C,EAAOrB,SAAW2D,IAAmBF,EAE/D,OACE,qCACE,oBAAIjH,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,UACE,qBAAKA,UAAU,uCAAf,UACIiH,GACA,cAAC,EAAD,MAIJ,qBAAKjH,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACGiH,GACC,cAAC,EAAD,IAGDE,IAAmBF,GAClB,mBAAG,UAAQ,qBAAqBjH,UAAU,kBAA1C,mCAKAiH,IACApC,EAAOrB,OAEH,cAAC,EAAD,CACEqB,OAAQA,IAGV,0FAKL4C,IAAqBR,GACpB,mBAAG,UAAQ,kBAAX,2DAUf,ECrEYS,EAAe,WAC1B,OACE,oBAAI1H,UAAU,QAAd,2BAEH,ECIY2H,EAAO,kBAClB,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CACED,KAAK,IACLC,QAAS,cAAC,EAAD,MAGX,cAAC,IAAD,CAAOC,OAAK,EAACD,QAAS,cAAC,EAAD,MAEtB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAU3H,GAAG,IAAI6H,SAAO,MAErD,cAAC,IAAD,CAAOH,KAAK,SAAZ,SACE,cAAC,IAAD,CACEA,KAAK,SACLC,QAAS,cAAC,EAAD,cAhBD,ECFpBG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,Q","file":"static/js/main.f84ab893.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={({ isActive }) => cn('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n          >\n            Home\n          </NavLink>\n          <NavLink\n            to=\"/people\"\n            className={({ isActive }) => cn('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import cn from 'classnames';\n\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchParams, getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\nconst gender = [\n  { All: null },\n  { Male: 'm' },\n  { Female: 'f' },\n];\n\nconst centuriesList = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries');\n\n  function setSearchWith(params: SearchParams) {\n    const search = getSearchWith(searchParams, params);\n\n    setSearchParams(search);\n  }\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchWith({ query: event.target.value.trim().toLowerCase() || null });\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {gender.map((role) => {\n          const [key, value] = Object.entries(role)[0];\n\n          return (\n            <SearchLink\n              key={value}\n              params={{\n                sex: value,\n              }}\n              className={cn({\n                'is-active': sex === value,\n              })}\n            >\n              {key}\n            </SearchLink>\n          );\n        })}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesList.map(century => {\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={cn('button mr-1', {\n                    'is-info': centuries.includes(century),\n                  })}\n                  params={{\n                    centuries: centuries.includes(century)\n                      ? centuries.filter(c => c !== century)\n                      : [...centuries, century],\n                  }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined': centuries.length,\n              })}\n              params={{\n                centuries: null,\n              }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className={cn('button is-link is-fullwidth', {\n            'is-outlined': centuries.length,\n          })}\n          params={{\n            centuries: null,\n            query: null,\n            sort: null,\n            order: null,\n            sex: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link, useParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n  motherNameLink: string | undefined,\n  fatherNameLink: string | undefined,\n};\n\nexport const PersonLink: React.FC<Props> = ({\n  person,\n  motherNameLink,\n  fatherNameLink,\n}) => {\n  const { slug } = useParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({\n        'has-background-warning': slug === person.slug,\n      })}\n    >\n      <td>\n        <Link\n          to={`/people/${person.slug}`}\n          className={cn({\n            'has-text-danger': person.sex === 'f',\n          })}\n        >\n          {person.name}\n        </Link>\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        { motherNameLink ? (\n          <Link\n            to={`/people/${motherNameLink}`}\n            className=\"has-text-danger\"\n          >\n            {person.motherName}\n          </Link>\n        ) : (\n          <>\n            { person.motherName || '-'}\n          </>\n        )}\n      </td>\n      <td>\n        { fatherNameLink ? (\n          <Link\n            to={`/people/${fatherNameLink}`}\n          >\n            {person.fatherName}\n          </Link>\n        ) : (\n          <>\n            { person.fatherName || '-'}\n          </>\n        )}\n      </td>\n    </tr>\n  );\n};\n","import cn from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[],\n};\n\nconst columns = [\n  { Name: 'name' },\n  { Sex: 'sex' },\n  { Born: 'born' },\n  { Died: 'died' },\n];\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const sortValue = searchParams.get('sort');\n  const sortOrder = searchParams.get('order');\n\n  const filterPeople = (p: Person[]) => {\n    let peopleCopy = [...p];\n    const filterBySex = searchParams.get('sex');\n    const filterByQuery = searchParams.get('query');\n    const filterByCentury = searchParams.getAll('centuries');\n\n    if (filterBySex) {\n      peopleCopy = peopleCopy.filter((person => (person.sex === filterBySex)));\n    }\n\n    if (filterByQuery) {\n      peopleCopy = peopleCopy.filter(\n        input => input.name.toLowerCase().includes(filterByQuery)\n        || input.motherName?.toLowerCase().includes(filterByQuery)\n        || input.fatherName?.toLowerCase().includes(filterByQuery),\n      );\n    }\n\n    if (filterByCentury && filterByCentury.length > 0) {\n      peopleCopy = peopleCopy.filter(person => {\n        return (\n          filterByCentury?.includes(Math.ceil(person.born / 100).toString())\n        );\n      });\n    }\n\n    if (sortValue) {\n      peopleCopy.sort((a, b) => {\n        switch (sortValue) {\n          case 'name':\n          case 'sex':\n            return a[sortValue].localeCompare(b[sortValue]);\n          case 'born':\n          case 'died':\n            return (a[sortValue] - b[sortValue]);\n          default: return 0;\n        }\n      });\n    }\n\n    if (sortOrder === 'desc') {\n      peopleCopy.reverse();\n    }\n\n    return peopleCopy;\n  };\n\n  const visiblePeople = filterPeople(people);\n\n  const getSlug = (name: string | null) => {\n    return people.find(person => person.name === name)?.slug;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {columns.map((column) => {\n            const [name, sortName] = Object.entries(column)[0];\n            const newSortName = sortValue === sortName\n              && sortOrder === 'desc' ? null : sortName;\n\n            let newOrder = null;\n\n            if (sortValue === sortName) {\n              if (sortOrder === 'desc') {\n                newOrder = null;\n              } else {\n                newOrder = 'desc';\n              }\n            }\n\n            return (\n              <th key={sortName}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {name}\n                  <SearchLink params={{\n                    sort: newSortName,\n                    order: newOrder,\n                  }}\n                  >\n                    <span className=\"icon\">\n                      <i className={cn('fas', {\n                        'fa-sort': sortValue !== sortName,\n                        'fa-sort-up': sortValue === sortName && !sortOrder,\n                        'fa-sort-down': sortValue === sortName && sortOrder,\n                      })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            );\n          })}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        { visiblePeople.map(person => {\n          return (\n            <PersonLink\n              person={person}\n              motherNameLink={getSlug(person.motherName)}\n              fatherNameLink={getSlug(person.fatherName)}\n              key={person.slug}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isErrorMessage, setIsErrorMessage] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(setPeople)\n      .catch(() => setIsErrorMessage(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const noPeopleOnServer = !people.length && !isErrorMessage && !isLoading;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!isLoading && (\n              <PeopleFilters />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isErrorMessage && !isLoading && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!isLoading && (\n                people.length\n                  ? (\n                    <PeopleTable\n                      people={people}\n                    />\n                  ) : (\n                    <p>\n                      There are no people matching the current search criteria\n                    </p>\n                  ))}\n\n              {noPeopleOnServer && !isLoading && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  HashRouter, Navigate, Route, Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const Root = () => (\n  <HashRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route\n          path=\"*\"\n          element={<NotFoundPage />}\n        />\n\n        <Route index element={<HomePage />} />\n\n        <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n        <Route path=\"people\">\n          <Route\n            path=\":slug?\"\n            element={<PeoplePage />}\n          />\n        </Route>\n      </Route>\n    </Routes>\n  </HashRouter>\n);\n","import 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport ReactDOM from 'react-dom';\nimport { Root } from './Root';\n\nReactDOM.render(\n  <Root />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}